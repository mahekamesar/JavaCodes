package Stack;

/* Java program to implement basic stack
operations */
class Stack {
    static final int MAX = 5;
    int top;
    int a[] = new int[MAX]; // Maximum size of Stack
    public Stack()
    {
        top = -1;
    }

    boolean isEmpty()
    {
        if(top<0){
            return true;
        }else{
            return false;
        }
    }
    boolean isFull(){
        if(top>=MAX-1){
            return true;
        }else{
            return false;
        }
    }

    boolean push(int x)
    {
        if (isFull()) {
            System.out.println("Stack Overflow Cannot Add more elements");
            return false;
        }
        else {
            top++;
            a[top] = x;
            System.out.println(x + " pushed into stack");
            return true;
        }
    }

    boolean pop()
    {
        if (isEmpty()) {
            System.out.println("Stack Underflow..Cannot Pop more elements");
            return false;
        }
        else {
            int x = a[top];
            top--;
            System.out.println(x+" popped from the stack");
            return true;
        }
    }

    boolean peek()
    {
        if (isEmpty()) {
            System.out.println("Stack Underflow..No Peek Element found");
            return false;
        }
        else {
            int x = a[top];
            System.out.println(x+" is the peek element");
            return true;
        }
    }

    void print(){
        if(isEmpty()){
            System.out.println("No elements present in the stack");
            return;
        }
        for(int i = top;i>=0;i--){
            System.out.print(" "+ a[i]);
        }
    }
}

// Driver code
class Main {
    public static void main(String args[])
    {
        Stack s = new Stack();
        s.push(10);
        s.push(20);
        s.push(30);
        s.push(40);
        s.push(50);
        System.out.println();
       // s.push(50);
        s.pop();
        s.pop();
        s.pop();
        s.pop();
        s.pop();
        s.pop();
        System.out.println();
        s.peek();
        System.out.println();
        System.out.print("Elements present in stack :");
        s.print();
    }
}

/*If stack size is full we can..create a temporary array of size 2*default size of
we can make use of ArrayList*/
